/* eslint-env mocha */
/* eslint-disable no-unused-expressions */

const chai = require('chai')
chai.should()
const chaiHttp = require('chai-http')
chai.use(chaiHttp)

const { Chat } = require('../../models/index')
const io = require('socket.io-client')
const socketURL = `http://${process.env.CHAT_HOST}:${process.env.CHAT_PORT}`

describe('chats socket ', function () {
  let clientConnected = `client:connected`
  let clientSendMessage = `client:sendMessage`
  let serverConnected = `server:connected`
  let serverGotMessage = `server:gotMessage`

  var superUser = {name: 'ella', id: 1}
  var chatClient1 = {name: 'scrappy', id: 2}

  it('clientId as userId is returned correctly from server', function (done) {
    var client1 = io.connect(socketURL)

    client1.emit(clientConnected, {
      chatId: 1,
      client: chatClient1.name,
      clientId: chatClient1.id
    })

    client1.on(serverConnected, data => {
      done()
      data.clientId.should.equal(chatClient1.id)
    })
  })

  it('clientId is generated by server when not sent by user', function (done) {
    var client1 = io.connect(socketURL)

    client1.emit(clientConnected, { chatId: 1, client: chatClient1.name })
    client1.on(serverConnected, data => {
      data.clientId.should.not.equal(undefined)
      done()
    })
  })

  it('clients message is received by superuser', function (done) {
    let client1 = io.connect(socketURL)
    let superuserSocket = io.connect(socketURL)
    let chatId
    let messageText = 'client message'

    Chat.create().then(function (chat) {
      chatId = chat.id

      client1.emit(clientConnected, { chatId: chatId, clientName: chatClient1.name, clientId: chatClient1.id })
      client1.on(serverConnected, data => {
        data.clientId.should.not.equal(undefined)
      })

      superuserSocket.on(serverGotMessage, function (data) {
        data.clientName.should.equal(chatClient1.name)
        data.text.should.equal(messageText)
        data.clientId.should.equal(chatClient1.id)
        done()
      })

      superuserSocket.emit(clientConnected, { chatId: chatId, clientName: superUser.name })
      client1.emit(clientSendMessage, { text: messageText, chatId: chatId })
    })
  })
})
