const chai = require('chai')
const should = chai.should()
const expect = chai.expect
const chaiHttp = require('chai-http')
chai.use(chaiHttp)

const helpers = require('./../support/helpers')
const { User, Chat, ChatMessage } = require('../../models/index')
const app = require('../../server')

const io = require('socket.io-client');

// todo use env
const socketURL = 'http://localhost:8080';
// const socketURL = 'http://10.0.0.4:8080';


describe('chats socket ', function () {

    helpers.restoreConsoleLog();

    let clientConnected = `client:connected`;
    let clientSendMessage = `client:sendMessage`;
    let serverConnected = `server:connected`;
    let serverGotMessage = `server:gotMessage`;

    var superUser = {name:"ella", id:1};
    var chatClient1 = {name:"scrappy", id:2};

    it('clientId as userId is returned correctly from server', function (done){

        // this.timeout(1000);

        var client1 = io.connect(socketURL);

        client1.emit(clientConnected, { chatId : 1 , client: chatClient1.name, clientId: chatClient1.id});
        client1.on (serverConnected, data => {

            data.clientId.should.equal(chatClient1.id)
            done();
        });


        // client1.on(`server:gotMessage`, data => {
        // })
    });

    it('clientId is generated by server when not sent by user', function (done){

        // this.timeout(1000);

        var client1 = io.connect(socketURL);

        client1.emit(clientConnected, { chatId : 1 , client: chatClient1.name, });
        client1.on (serverConnected, data => {
            data.clientId.should.not.equal(undefined)
            done();
        });
    });

    it('clients message is received by superuser', function (done){

        let client1 = io.connect(socketURL);
        let superUser = io.connect(socketURL);
        let chatId;
        let messageText = "client message"

        Chat.create().then(function (chat) {
            chatId = chat.id;

            client1.emit(clientConnected, { chatId : chatId , client: chatClient1.name, clientId:chatClient1.id});
            client1.on (serverConnected, data => {
                data.clientId.should.not.equal(undefined)
            });

            superUser.on(serverGotMessage, function (data) {
                data.client.should.equal(chatClient1.name);
                data.text.should.equal(messageText);
                data.clientId.should.equal(chatClient1.id);
                done();
            });

            superUser.emit(clientConnected, { chatId : chatId , client: superUser.name});
            client1.emit(clientSendMessage, { text: messageText, chatId: chatId});
        })
    });
});